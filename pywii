#!/usr/bin/env python
# -*- coding: utf-8 -*-
#

__author__  = "hugsy"
__version__ = 0.1
__licence__ = "WTFPL v.2"
__file__    = "pywii.py"
__doc__     = """ 
pywii helps you to easily create interaction between your wiimote and
your PC. For the moment, it only works on *nix with python 2.5+
""" 


from lib.base import find_wiimotes
from lib.wiimote import Wiimote
from argparse import ArgumentParser
from config import PywiiConfig


def listen_for_wiimotes(timeout, attempts=3):
    """
    Listen for new wiimotes
    """

    new_wiimotes = []
        
    while attempts :
        new_wiimotes = find_wiimotes(timeout)
        if len(new_wiimotes) > 0 :
            break
        attempts -= 1
            
    return new_wiimotes

    
def start(wiimote, idx, configfile):
    """
    Start wiimote thread, and add it to the wiimote threads pool
    """

    if idx > 4 :
        print ("Cannot handle more than 4 Wiimotes.")
        return
    
    cfg = PywiiConfig(configfile)
    mac, name = wiimote[0:2]
    wiimote_o = Wiimote(mac, name, idx, cfg)
    wiimote_o.daemon = True
    wiimote_o.start()
    return wiimote_o


        
def start_all(wiimotes, configfile):
    """
    Starts all wiimotes and returns an array of all started wiimotes
    """
    
    i = 1
    started = []
    
    for new_wiimote in wiimotes :
        w = start(new_wiimote, i, configfile)
        if w is not None :
            i += 1
            started.append(w)

    return started


def stop(wiimote):
    """ Stop wiimote """
    wiimote.join()
        
        
def stop_all(wiimotes):
    """ Stop all wiimotes """
    for wm in wiimotes :
        stop(wm)


if __name__ == "__main__":
    usage = "usage: %prog [options] arg\nWritten by {0}".format(__author__)
    parser = ArgumentParser(usage)
    
    parser.add_option("-f", "--file", dest="filename", default="./pywii.rc",
                      metavar="/path/to/configfile", type="string",
                      help="read data from filename [default: %default]")

    parser.add_option("-t", "--timeout", dest="timeout", default=5,
                      metavar="SECONDS", type="int",
                      help="Seconds before wiimote search timeouts [default: %default]")
    
    (options, args) = parser.parse_args()

    configfile = options.filename
    timeout    = options.timeout

    print ("%s, version %.2f" % (__file__, __version__))
    print ("By %s under %s\n" % (__author__, __licence__))
    print ("Press simultaneously '1' and '2' buttons on your Wiimote")
       
    wiimotes_found = listen_for_wiimotes(timeout)
    if not wiimotes_found :
        print ("[-] No wiimote found, exiting...")
        exit(0)

    wiimote = start(wiimotes_found[0], 1, configfile)
    stop (wiimote)
    
    exit (0)
